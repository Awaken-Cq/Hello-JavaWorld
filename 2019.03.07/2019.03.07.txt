 * java setting
 1. oracle.com >> jdk download >> 설치



 2. 환경변수 설정. (내컴퓨터 우클릭 >> 속성 
 >> 고급시스템 설정 >> 환경 변수>> 시스템 변수)
//  실행 명령어만으로 프로그램을 실행하려면
프로그램을 환경변수에 자동인식하게끔 해야한다.
jre는 설치시 자동으로 윈도우에 등록이 된다.
jdk는 등록되지 않아 실행파일을 등록해줘야한다.
bin폴더 : 실행파일 모음폴더
////////////////새로만들기//////////////////
	변수이름	값
  2-1. JAVA_HOME	C:\Program Files\Java\jdk1.8.0_202	//	(시스템 변수이름은 대문자로 사용)
  2-2. CLASSPATH	.
///////////////////편집////////////////////
  2-3. path		%JAVA_HOME%\BIN;(이부분추가)C:\app\Administrator\product\11.2.0\dbhome_1\bin;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common
 3. 설정 확인 (CMD)
 > java -version
 > cmd - 'java -version' - 'javac'

 %JAVA_HOME% : window 에서 변수를 '%변수%' 로 감싸주면 이것은 변수가 가진 값을 불러오는 것을 의미한다.

 * 실행방법
 			(byte code)
   *.java	>>     compile     >>    *.class    >>    run	>>	result
HelloJava.java			     HelloJava(.class)		   Hello Java!!!!
		javac HelloJava.java		    java Hellojava




파란색은 예약어, 
public class HelloJava
{
    public static void main(String args[])
    {
        System.out.println("Hello Java !!!!");
        System.out.print("안녕");
        System.out.println(" 자바 !!!!");
        System.out.println("-- 프로그램 종료 --");
    }
}




print : 출력
println : 출력하고 줄바꿈

에디트 플러스에서 자바 컴파일하는법
도구 > 기본설정 > 사용자도구 > 그룹이름 변경 및 추가 > 
메뉴제목 입력, 명령 java jdk  bin 폴더 안에 javac
인수 파일이름  > 디렉토리 파일디렉토리 > 동작 출력 내용 캡쳐
또 추가 > 메뉴제목 입력 > 명령 java jdk bin폴더안에 java
> 인수 확장자를 뺀 파일이름 > 디렉토리 파일디렉토리 > 동작 출력 내용 캡쳐


-----------------------------------------------------------------------
* 순서
1. 변수(variable)(자료형, date type)
2. 연산자(operator)
3. 제어문(조건문[if, switch ~ case] , 반복문[for, while, do ~ while])
4. class(일반, 추상, 내부, interface), 상속
   - field(속성)(필드는 변수다)
   - method(기능)
5. package
   - 사용자정의 package
   - system package
     - java.lang
     - java.io
     - java.net
     - java.util
     - java.awt --------------------1차 프로젝트 시작
     - java.sql
     -
-----------------------------------------------------------------------
* 접근제어자(Access Modifier)
    * private : 자신의 클래스 안에서안 사용가능.
    * default(생략) : private + 같은 package(폴더)안에서는 사용 가능.
    * protected : default + package가 달라도 두 클래스가 상속 관계일 경우 사용가능.
    * public : 조건 제한 없이 사용가능.


* 자료형(Data Type)
    * data type
        * 기본형              DT               size        etc
        * 논리형             boolean       1byte     true, false
        * 문자형             char             2            '1', 'a', '김',   'adc' << X
                                                                                   특수문자 : '\t'(tab), '\n'(개행), '\''('), '\"'("), '\\'(\)        \'노정탁\'
        * 숫자형
            * 정수형      byte            1
                                                  short           2
                                                  int               4
                                                  long            8
            * 실수형      float            4
                                                  double        8
        * 참조형 DT : Object, 배열(array)
* 명명규칙
    * 영문, 숫자, 한글가능. 영문으로 시작.(숫자시작 x)
    * 클래스는 대문자로, 메소드나 변수는 소문자로 시작. 
                      합성어의 경우 단어의 첫글자를 대문자로. (Camel case)

    * 클래스, 메소드, 변수 등의 이름에 의미를 부여하는게 좋음.
    * 특수문자 사용x(단, '_', '$'는 가능하지만 이너클래스에 쓰이는 '$'는 지양)
    * 예약어와 동일한 변수명 X
* 주석문
        // : 한줄주석
        /*
        .
        .
        .
        */ : 여러줄 주석
        /**
        *
        *
        */ : document 주석
1. 변수(Variable) : 하나의 값을 저장하는 공간.
  1-1. 기본형(primitive) Data Type
* 선언
    형식)
    접근제어자 자료형 변수명;
    예)
        private int age;
        [default] char gender;
        public String carName;
        boolean flag;


* 사용(값저장, 값할당)
    형식)
        변수명 = 값;
    예)
        age = 25;
        gender = '남';
        carName = "쏘나타";
        flag = true;
        
        >>>>>>>>>>>>>>>>>>>1, 2를 동시에..
    형식)
        접근제어자 자료형 변수명 = 값;
    예)
        private in age = 28;
        char gender  '남';
        public String carName = "쏘나타";
        boolean flag = true;




  1-2. 참조형(reference) Data Type






2. 연산자(operator)        //    대입연산자 우선순위가 가장 낮고, 가로 우선순위가 가장 높다.
    2-1. 단항연산자
* 1증가(감소)연산자 : ++, --
    * 변수++ : 선실행 후 증가
    * ++변수 : 선증가 후 실행
                예)
                int x = 10;
                S.o.p(x);            10
                S.o.p(x++);       10        11
                S.o.p(--x);         10        10
                S.o.p(x++);       10        11
                S.o.p(++x);       12        12
                S.o.p(x--);         12        11
                S.o.p(--x);         10        10
                S.o.p(x++);       10        11
                S.o.p(x);            11
    * +x, -x : 양수, 음수 전환
    * ! : not연산자 boolean flag = true / S.o.p(!flag) ==> 출력 : false